#'
#' alpha: estimated Pareto shape parameter.
#'
#' mu: estimated expectation of the lognormal distribution on the lognormal scale.
#'
#' sigma: estimated standard deviation of the lognormal distribution on the lognormal scale.
#'
#' loglik: maximied log-likelihood.
#'
#' nit: number of iterations.
#'
#' npareto: estimated number of Pareto observations.
#'
#' bootstd: bootstrap standard errors of the parameter estimators.
#' @details At each bootstrap replication, the mixture is estimated with thresholds equal to ys(n-nthresh), ys(n-nthresh+1),..., ys(n),
#' where n is the sample size and ys is the sample sorted in in ascending order.
#' @keywords mixture; profile likelihood.
#' @export
#' @examples
#' mixFit <- LPfit(TN2016,90,0)
#' @references{
#'   \insertRef{bee22}{LNPar}
#' }
#'
#'
#' @importFrom Rdpack reprompt
LPfit <- function(y,minRank,nbootMLE)
{
ys <- sort(y)
n <- length(ys)
# initial values
a0 <- ys[length(ys)-minRank]
p0 <- length(ys[ys<a0])/n
alpha0 <- length(ys[ys>a0]) / (sum(log(ys[ys>a0]/a0)))
mu0 <- mean(log(ys))+1
Psi0 <- var(log(ys))
th <- ys
nthresh <- length(th)
resMat <- matrix(0,nthresh,5)
paretoObs <- cbind(th,matrix(0,nthresh,2))
n.cores <- detectCores()
registerDoParallel(n.cores)
foreach (i=minRank:(n-1), .combine = c) %dopar% {
Res <- par_logn_mix_known(ys, p0, th[i], alpha0, mean(ys), sd(ys))
}
# resMat[i,] <- c(Res$prior,Res$alpha,Res$mu,Res$sigma,Res$loglik)
indice <- which.max(resMat[,5])
xminhat <- th[indice]
resBest <- par_logn_mix_known(ys, p0, xminhat, alpha0, mean(ys), sd(ys))
npareto <- n * (1-resBest$prior)
prior <- resBest$prior
postProb <- resBest$post
alpha <- resBest$alpha
mu <- resBest$mu
sigma <- resBest$sigma
loglik <- resBest$loglik
nit <- resBest$nit
if (nbootMLE==0)
{
results <- list(xmin=xminhat,prior=prior,postProb=postProb,alpha=alpha,mu=as.double(mu),sigma=as.vector(sigma),loglik=loglik,nit=nit,npareto=npareto)
return(results)
}
else
{
resBoot <- MLEBoot(ys,nbootMLE,nthresh,p0,alpha0,mean(ys),var(ys))
results <- list(xmin=xminhat,prior=prior,postProb=postProb,alpha=alpha,mu=as.double(mu),sigma=as.vector(sigma),loglik=loglik,nit=nit,npareto=npareto,bootstd=resBoot$std)
return(results)
}
}
resFit <- LPfit(TN2016,n-minRank,nbootMLE)
#' Estimating a lognormal-Pareto mixture by maximizing the profile log-likelihood
#'
#' This function fits a lognormal-Pareto mixture by maximizing the profile log-likelihood.
#' @param y numerical vector: random sample from the mixture.
#' @param minRank integer: minimum possible rank of the threshold.
#' @return A list with the following elements:
#'
#' xmin: estimated threshold.
#'
#' prior: estimated mixing weight.
#'
#' postProb: matrix of posterior probabilities.
#'
#' alpha: estimated Pareto shape parameter.
#'
#' mu: estimated expectation of the lognormal distribution on the lognormal scale.
#'
#' sigma: estimated standard deviation of the lognormal distribution on the lognormal scale.
#'
#' loglik: maximied log-likelihood.
#'
#' nit: number of iterations.
#'
#' npareto: estimated number of Pareto observations.
#'
#' bootstd: bootstrap standard errors of the parameter estimators.
#' @details At each bootstrap replication, the mixture is estimated with thresholds equal to ys(n-nthresh), ys(n-nthresh+1),..., ys(n),
#' where n is the sample size and ys is the sample sorted in in ascending order.
#' @keywords mixture; profile likelihood.
#' @export
#' @examples
#' mixFit <- LPfit(TN2016,90,0)
#' @references{
#'   \insertRef{bee22}{LNPar}
#' }
#'
#'
#' @importFrom Rdpack reprompt
LPfit <- function(y,minRank,nbootMLE)
{
library(LNPar)
ys <- sort(y)
n <- length(ys)
# initial values
a0 <- ys[length(ys)-minRank]
p0 <- length(ys[ys<a0])/n
alpha0 <- length(ys[ys>a0]) / (sum(log(ys[ys>a0]/a0)))
mu0 <- mean(log(ys))+1
Psi0 <- var(log(ys))
th <- ys
nthresh <- length(th)
resMat <- matrix(0,nthresh,5)
paretoObs <- cbind(th,matrix(0,nthresh,2))
n.cores <- detectCores()
registerDoParallel(n.cores)
foreach (i=minRank:(n-1), .combine = c) %dopar% {
Res <- par_logn_mix_known(ys, p0, th[i], alpha0, mean(ys), sd(ys))
}
# resMat[i,] <- c(Res$prior,Res$alpha,Res$mu,Res$sigma,Res$loglik)
indice <- which.max(resMat[,5])
xminhat <- th[indice]
resBest <- par_logn_mix_known(ys, p0, xminhat, alpha0, mean(ys), sd(ys))
npareto <- n * (1-resBest$prior)
prior <- resBest$prior
postProb <- resBest$post
alpha <- resBest$alpha
mu <- resBest$mu
sigma <- resBest$sigma
loglik <- resBest$loglik
nit <- resBest$nit
if (nbootMLE==0)
{
results <- list(xmin=xminhat,prior=prior,postProb=postProb,alpha=alpha,mu=as.double(mu),sigma=as.vector(sigma),loglik=loglik,nit=nit,npareto=npareto)
return(results)
}
else
{
resBoot <- MLEBoot(ys,nbootMLE,nthresh,p0,alpha0,mean(ys),var(ys))
results <- list(xmin=xminhat,prior=prior,postProb=postProb,alpha=alpha,mu=as.double(mu),sigma=as.vector(sigma),loglik=loglik,nit=nit,npareto=npareto,bootstd=resBoot$std)
return(results)
}
}
resFit <- LPfit(TN2016,n-minRank,nbootMLE)
#' Estimating a lognormal-Pareto mixture by maximizing the profile log-likelihood
#'
#' This function fits a lognormal-Pareto mixture by maximizing the profile log-likelihood.
#' @param y numerical vector: random sample from the mixture.
#' @param minRank integer: minimum possible rank of the threshold.
#' @return A list with the following elements:
#'
#' xmin: estimated threshold.
#'
#' prior: estimated mixing weight.
#'
#' postProb: matrix of posterior probabilities.
#'
#' alpha: estimated Pareto shape parameter.
#'
#' mu: estimated expectation of the lognormal distribution on the lognormal scale.
#'
#' sigma: estimated standard deviation of the lognormal distribution on the lognormal scale.
#'
#' loglik: maximied log-likelihood.
#'
#' nit: number of iterations.
#'
#' npareto: estimated number of Pareto observations.
#'
#' bootstd: bootstrap standard errors of the parameter estimators.
#' @details At each bootstrap replication, the mixture is estimated with thresholds equal to ys(n-nthresh), ys(n-nthresh+1),..., ys(n),
#' where n is the sample size and ys is the sample sorted in in ascending order.
#' @keywords mixture; profile likelihood.
#' @export
#' @examples
#' mixFit <- LPfit(TN2016,90,0)
#' @references{
#'   \insertRef{bee22}{LNPar}
#' }
#'
#'
#' @importFrom Rdpack reprompt
LPfit <- function(y,minRank,nbootMLE)
{
ys <- sort(y)
n <- length(ys)
# initial values
a0 <- ys[length(ys)-minRank]
p0 <- length(ys[ys<a0])/n
alpha0 <- length(ys[ys>a0]) / (sum(log(ys[ys>a0]/a0)))
mu0 <- mean(log(ys))+1
Psi0 <- var(log(ys))
th <- ys
nthresh <- length(th)
resMat <- matrix(0,nthresh,5)
paretoObs <- cbind(th,matrix(0,nthresh,2))
n.cores <- detectCores()
registerDoParallel(n.cores)
foreach (i=minRank:(n-1), .combine = c) %dopar% {  library(LNPar)
Res <- par_logn_mix_known(ys, p0, th[i], alpha0, mean(ys), sd(ys))
}
# resMat[i,] <- c(Res$prior,Res$alpha,Res$mu,Res$sigma,Res$loglik)
indice <- which.max(resMat[,5])
xminhat <- th[indice]
resBest <- par_logn_mix_known(ys, p0, xminhat, alpha0, mean(ys), sd(ys))
npareto <- n * (1-resBest$prior)
prior <- resBest$prior
postProb <- resBest$post
alpha <- resBest$alpha
mu <- resBest$mu
sigma <- resBest$sigma
loglik <- resBest$loglik
nit <- resBest$nit
if (nbootMLE==0)
{
results <- list(xmin=xminhat,prior=prior,postProb=postProb,alpha=alpha,mu=as.double(mu),sigma=as.vector(sigma),loglik=loglik,nit=nit,npareto=npareto)
return(results)
}
else
{
resBoot <- MLEBoot(ys,nbootMLE,nthresh,p0,alpha0,mean(ys),var(ys))
results <- list(xmin=xminhat,prior=prior,postProb=postProb,alpha=alpha,mu=as.double(mu),sigma=as.vector(sigma),loglik=loglik,nit=nit,npareto=npareto,bootstd=resBoot$std)
return(results)
}
}
resFit <- LPfit(TN2016,n-minRank,nbootMLE)
system.time(resFit <- LPfit(TN2016,n-minRank,nbootMLE))
system.time(resFit <- LPfit(TN2016,n-minRank,nbootMLE))
nbootMLE <- 10
LPfit()
LPfit
system.time(resFit <- LPfit(TN2016,n-minRank,nbootMLE))
library('LNPar')
LPfit
library('LNPar')
LPfit
system.time(resFit <- LPfit(TN2016,n-minRank,nbootMLE))
# y <- read.delim('C:\\Users\\marco.bee\\Dropbox\\LognPareto\\WebCodes\\impreseTN2016.csv',header=F,sep=',')
# y <- y[,3]
# TN2016 <- y[y>0]
# use_data(TN2016)
n <- length(TN2016)
minRank <- 33
nbootMLE <- 10
system.time(resFit <- LPfit(TN2016,n-minRank,nbootMLE))
system.time(resFit <- LPfit(TN2016,n-minRank,nbootMLE))
library(devtools)
library(roxygen2)
setwd("C:\\Users\\marco.bee\\Dropbox\\EstDynLNPar")
setwd("./LognParDynMix") # LNPar must be an existing directory
setwd("C:\\Users\\marco.bee\\Dropbox\\EstDynLNPar")
setwd("C:\\Users\\marco.bee\\Dropbox\\EstDynLNPar")
setwd("./LognParDynMix") # LNPar must be an existing directory
document()
setwd("C:\\Users\\marco.bee\\Dropbox\\EstDynLNPar")
create("LognParDynMix")
library(devtools)
library(roxygen2)
setwd("C:\\Users\\marco.bee\\OneDrive\\LognPareto")
setwd("./LNPar") # LNPar must be an existing directory
document()
setwd('..')
install('LNPar')
library('LNPar')
library(devtools)
library(roxygen2)
setwd("C:\\Users\\marco.bee\\OneDrive\\LognPareto")
setwd("./LNPar") # LNPar must be an existing directory
document()
setwd('..')
install('LNPar')
library('LNPar')
# y <- read.delim('C:\\Users\\marco.bee\\Dropbox\\LognPareto\\WebCodes\\impreseTN2016.csv',header=F,sep=',')
# y <- y[,3]
# TN2016 <- y[y>0]
# use_data(TN2016)
n <- length(TN2016)
minRank <- 33
nbootMLE <- 10
resFit <- LPfit(TN2016,n-minRank,nbootMLE)
library(LNPar)
?TN2016
?Metro2019
library(devtools)
library(roxygen2)
setwd("C:\\Users\\marco.bee\\OneDrive\\LognPareto")
setwd("./LNPar") # LNPar must be an existing directory
document()
setwd('..')
install('LNPar')
library('LNPar')
library(devtools)
library(roxygen2)
setwd("C:\\Users\\marco.bee\\OneDrive\\LognPareto")
setwd("./LNPar") # LNPar must be an existing directory
document()
setwd('..')
install('LNPar')
library('LNPar')
?TN2016
# y <- read.delim('C:\\Users\\marco.bee\\Dropbox\\LognPareto\\WebCodes\\impreseTN2016.csv',header=F,sep=',')
# y <- y[,3]
# TN2016 <- y[y>0]
# use_data(TN2016)
n <- length(TN2016)
minRank <- 33
nbootMLE <- 10
resFit <- LPfit(TN2016,n-minRank,nbootMLE)
library(devtools)
library(roxygen2)
setwd("C:\\Users\\marco.bee\\OneDrive\\LognPareto")
setwd("./LNPar") # LNPar must be an existing directory
document()
setwd('..')
install('LNPar')
library('LNPar')
?LPfit
library(devtools)
library(roxygen2)
setwd("C:\\Users\\marco.bee\\OneDrive\\LognPareto")
setwd("./LNPar") # LNPar must be an existing directory
document()
setwd('..')
install('LNPar')
library('LNPar')
?MLEBoot
library(devtools)
library(roxygen2)
setwd("C:\\Users\\marco.bee\\OneDrive\\LognPareto")
setwd("./LNPar") # LNPar must be an existing directory
document()
setwd('..')
install('LNPar')
library('LNPar')
?LPtest
library(devtools)
library(roxygen2)
setwd("C:\\Users\\marco.bee\\OneDrive\\LognPareto")
setwd("./LNPar") # LNPar must be an existing directory
document()
setwd('..')
install('LNPar')
library('LNPar')
?LPtest
mixFit <- LPfit(TN2016,90,0)
ell1 <- mixFit$loglik
estNull <- c(mean(log(TN2016)),sd(log(TN2016)))
ellNull <- sum(log(dlnorm(TN2016,estNull[1],estNull[2])))
obsTest <- 2*(ell1-ellNull)
obsTest
?LPtest
resTest <- LPtest(length(TN2016),mean(log(TN2016)),sd(log(TN2016)),obsTest,2,90)
resTest
library(devtools)
library(roxygen2)
setwd("C:\\Users\\marco.bee\\OneDrive\\LognPareto")
setwd("./LNPar") # LNPar must be an existing directory
document()
setwd('..')
install('LNPar')
library('LNPar')
mixFit <- LPfit(TN2016,90,0)
library(devtools)
library(roxygen2)
setwd("C:\\Users\\marco.bee\\OneDrive\\LognPareto")
setwd("./LNPar") # LNPar must be an existing directory
document()
setwd('..')
install('LNPar')
library('LNPar')
mixFit <- LPfit(TN2016,90,0)
ell1 <- mixFit$loglik
estNull <- c(mean(log(TN2016)),sd(log(TN2016)))
ellNull <- sum(log(dlnorm(TN2016,estNull[1],estNull[2])))
obsTest <- 2*(ell1-ellNull)
obsTest
resTest <- LPtest(length(TN2016),mean(log(TN2016)),sd(log(TN2016)),obsTest,2,90)
library(devtools)
library(roxygen2)
setwd("C:\\Users\\marco.bee\\OneDrive\\LognPareto")
setwd("./LNPar") # LNPar must be an existing directory
document()
setwd('..')
install('LNPar')
library('LNPar')
mixFit <- LPfit(TN2016,90,0)
ell1 <- mixFit$loglik
estNull <- c(mean(log(TN2016)),sd(log(TN2016)))
ellNull <- sum(log(dlnorm(TN2016,estNull[1],estNull[2])))
obsTest <- 2*(ell1-ellNull)
resTest <- LPtest(length(TN2016),mean(log(TN2016)),sd(log(TN2016)),obsTest,2,90)
resTest
library(devtools)
library(roxygen2)
setwd("C:\\Users\\marco.bee\\OneDrive\\LognPareto")
setwd("./LNPar") # LNPar must be an existing directory
document()
setwd('..')
install('LNPar')
library('LNPar')
source("~/.active-rstudio-document")
resTest
obsTest
library(devtools)
library(roxygen2)
setwd("C:\\Users\\marco.bee\\OneDrive\\LognPareto")
setwd("./LNPar") # LNPar must be an existing directory
document()
setwd('..')
install('LNPar')
library('LNPar')
mixFit <- LPfit(TN2016,90,2)
library(devtools)
library(roxygen2)
setwd("C:\\Users\\marco.bee\\OneDrive\\LognPareto")
setwd("./LNPar") # LNPar must be an existing directory
document()
setwd('..')
install('LNPar')
library('LNPar')
nboot = 2
nreps.list <- sapply(1:nboot, list)
n.cores <- parallel::detectCores()
clust <- parallel::makeCluster(n.cores)
LRMat = rep(0,nboot)
temp <- parallel::parLapply(clust,nreps.list,LPtest,length(TN2016),mean(log(TN2016)),sd(log(TN2016)),obsTest,2,90)
mixFit <- LPfit(TN2016,90,2)
ell1 <- mixFit$loglik
estNull <- c(mean(log(TN2016)),sd(log(TN2016)))
ellNull <- sum(log(dlnorm(TN2016,estNull[1],estNull[2])))
obsTest <- 2*(ell1-ellNull)
temp <- parallel::parLapply(clust,nreps.list,LPtest,length(TN2016),mean(log(TN2016)),sd(log(TN2016)),obsTest,2,90)
temp <- parallel::parLapply(clust,nreps.list,LPtest,length(TN2016),mean(log(TN2016)),sd(log(TN2016)),obsTest,90)
temp
for (i in 1:nboot)
{
BootMat[i,] = as.vector(unlist(temp[[i]]))
}
for (i in 1:nboot)
{
LRMat[i,] = as.vector(unlist(temp[[i]]))
}
for (i in 1:nboot)
{
LRMat[i] = as.vector(unlist(temp[[i]]))
}
LRMat
LRVec = rep(0,nboot)
for (i in 1:nboot)
{
LRVec[i] = as.vector(unlist(temp[[i]]))
}
obsp <- length(lrVec[lrVec>obsTest])/nboot
obsp <- length(LRVec[LRVec>obsTest])/nboot
obsp
library(devtools)
library(roxygen2)
setwd("C:\\Users\\marco.bee\\OneDrive\\LognPareto")
setwd("./LNPar") # LNPar must be an existing directory
document()
setwd('..')
install('LNPar')
library('LNPar')
mixFit <- LPfit(TN2016,90,2)
ell1 <- mixFit$loglik
estNull <- c(mean(log(TN2016)),sd(log(TN2016)))
ellNull <- sum(log(dlnorm(TN2016,estNull[1],estNull[2])))
obsTest <- 2*(ell1-ellNull)
nboot = 2
minRank = 90
ParallelTest(nboot,TN2016,obsTest,minRank)
library(devtools)
library(roxygen2)
setwd("C:\\Users\\marco.bee\\OneDrive\\LognPareto")
setwd("./LNPar") # LNPar must be an existing directory
document()
setwd('..')
install('LNPar')
library('LNPar')
mixFit <- LPfit(TN2016,90,2)
ell1 <- mixFit$loglik
estNull <- c(mean(log(TN2016)),sd(log(TN2016)))
ellNull <- sum(log(dlnorm(TN2016,estNull[1],estNull[2])))
obsTest <- 2*(ell1-ellNull)
nboot = 2
minRank = 90
ParallelTest(nboot,TN2016,obsTest,minRank)
library(devtools)
library(roxygen2)
setwd("C:\\Users\\marco.bee\\OneDrive\\LognPareto")
setwd("./LNPar") # LNPar must be an existing directory
document()
setwd('..')
install('LNPar')
library('LNPar')
mixFit <- LPfit(TN2016,90,2)
ell1 <- mixFit$loglik
estNull <- c(mean(log(TN2016)),sd(log(TN2016)))
ellNull <- sum(log(dlnorm(TN2016,estNull[1],estNull[2])))
obsTest <- 2*(ell1-ellNull)
nboot = 2
minRank = 90
ParallelTest(nboot,TN2016,obsTest,minRank)
